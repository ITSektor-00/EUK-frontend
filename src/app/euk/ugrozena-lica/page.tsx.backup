"use client";
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../../contexts/AuthContext';
import ErrorHandler from '../../components/ErrorHandler';
import { apiService } from '../../../services/api';
import { PermissionGuard } from '@/components/PermissionGuard';
import { webSocketService } from '../../../services/websocketService';

import NovoUgrozenoLiceModal from './NovoUgrozenoLiceModal';
import UgrozenaLicaStatistika from './UgrozenaLicaStatistika';
import UrediUgrozenoLiceModal from './UrediUgrozenoLiceModal';
import T1ExcelExport from '../../../components/T1ExcelExport';
// Material UI Imports
import {
  Paper,
} from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';

// Icons Imports
import { Add, FileDownload, FileUpload } from '@mui/icons-material';

// Export imports
import { mkConfig, generateCsv, download } from 'export-to-csv';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import ExportDialog from '../../components/ExportDialog';

import { UgrozenoLiceT1, UgrozenoLiceFormData, UgrozenoLiceResponse } from './types';

interface Kategorija {
  kategorijaId: number;
  naziv: string;
  skracenica: string;
}

const csvConfig = mkConfig({
  fieldSeparator: ',',
  decimalSeparator: '.',
  useKeysAsHeaders: true,
});

export default function UgrozenaLicaPage() {
  const router = useRouter();
  const { token, user } = useAuth();
  const [ugrozenaLica, setUgrozenaLica] = useState<UgrozenoLiceT1[]>([]);
  const [kategorije, setKategorije] = useState<Kategorija[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);
  const [importProgress, setImportProgress] = useState({
    isImporting: false,
    current: 0,
    total: 0,
    percentage: 0,
    estimatedTime: 0,
    successCount: 0,
    errorCount: 0
  });
  const [cancelImport, setCancelImport] = useState(false);
  

  // Poll batch progress function
  const pollBatchProgress = async (batchId: string, batchNumber: number, totalBatches: number) => {
    const maxAttempts = 60; // 30 seconds max (500ms * 60)
    let attempts = 0;
    
    while (attempts < maxAttempts) {
      try {
        const progress = await apiService.getUgrozenoLiceBatchProgress(batchId, token!);
        console.log(`Batch ${batchNumber} progress:`, progress);
        
        // Update progress state
        setImportProgress(prev => ({
          ...prev,
          successCount: prev.successCount + (progress.successRecords || 0),
          errorCount: prev.errorCount + (progress.errorRecords || 0),
          current: batchNumber,
          percentage: Math.round((batchNumber / totalBatches) * 100),
          estimatedTime: Math.round((totalBatches - batchNumber) * 0.2)
        }));
        
        // If completed or error, stop polling
        if (progress.status === 'COMPLETED' || progress.status === 'ERROR') {
          console.log(`Batch ${batchNumber} finished with status: ${progress.status}`);
          break;
        }
      } catch (error) {
        console.error(`Error polling batch ${batchNumber} progress:`, error);
      }
      
      attempts++;
      await new Promise(resolve => setTimeout(resolve, 500)); // Poll every 500ms
    }
    
    if (attempts >= maxAttempts) {
      console.warn(`Batch ${batchNumber} polling timeout after ${maxAttempts} attempts`);
    }
  };

  // Prevent ESC key from closing modal during import
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (importProgress.isImporting && e.key === 'Escape') {
        e.preventDefault();
        e.stopPropagation();
      }
    };

    if (importProgress.isImporting) {
      document.addEventListener('keydown', handleKeyDown);
      return () => document.removeEventListener('keydown', handleKeyDown);
    }
  }, [importProgress.isImporting]);

  // Modal states
  const [showModal, setShowModal] = useState(false);
  const [editingUgrozenoLice, setEditingUgrozenoLice] = useState<UgrozenoLiceT1 | null>(null);
  const [exportDialogOpen, setExportDialogOpen] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [showExcelExport, setShowExcelExport] = useState(false);
  
  // Sort configuration
  const [sortConfig, setSortConfig] = useState<{ field: string; direction: 'asc' | 'desc' } | null>(null);
  
  // Tab state
  const [activeTab, setActiveTab] = useState<'tabela' | 'statistika'>('tabela');

  // Pagination state
  const [currentPage, setCurrentPage] = useState(0);
  const [pageSize, setPageSize] = useState(10);

  // State za custom selekciju
  const [customSelectedIds, setCustomSelectedIds] = useState<Set<number>>(new Set());
  
  // Toggle funkcija za selekciju
  const toggleRowSelection = (id: number) => {
    setCustomSelectedIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  // Select all / Deselect all
  const toggleSelectAll = () => {
    if (customSelectedIds.size > 0) {
      setCustomSelectedIds(new Set());
    } else {
      const allIds = new Set(filteredData.map(row => row.ugrozenoLiceId).filter((id): id is number => Boolean(id)));
      setCustomSelectedIds(allIds);
    }
  };

  // Funkcija za refresh podataka
  const handleRefresh = async () => {
    setRefreshing(true);
    await Promise.all([
      fetchUgrozenaLica(),
      fetchKategorije()
    ]);
    setRefreshing(false);
  };

  const fetchUgrozenaLica = async (showLoading = true) => {
    if (showLoading) setLoading(true);
    setError(null);
    
    try {
      
      // Učitaj sve podatke kroz više stranica da pokrijemo celu bazu
      let allUgrozenaLica: UgrozenoLiceT1[] = [];
      let currentPage = 0;
      let hasMoreData = true;
      
      while (hasMoreData) {
        const params = new URLSearchParams();
        params.append('size', '1000'); // Maksimalna dozvoljena veličina stranice
        params.append('page', currentPage.toString());
        
        const data = await apiService.getUgrozenaLica(params.toString(), token!);
        const pageData = data.content || data;
        
        if (Array.isArray(pageData) && pageData.length > 0) {
          allUgrozenaLica = [...allUgrozenaLica, ...pageData];
          currentPage++;
          
          // Ako je broj rezultata manji od size, to je poslednja stranica
          if (pageData.length < 1000) {
            hasMoreData = false;
          }
          } else {
          hasMoreData = false;
        }
      }
      
      setUgrozenaLica(allUgrozenaLica);
    } catch (err) {
      console.error('Error fetching ugrozena lica:', err);
      setError(err instanceof Error ? err.message : 'Greška pri učitavanju');
    } finally {
      if (showLoading) setLoading(false);
    }
  };

  // Filter pretraga - koristi server-side pretragu kroz celu bazu
  const handleFilterSearch = async () => {
    if (!token) return;
    
    setLoading(true);
    setError(null);
    
    try {
      // Proveri da li ima bilo koji filter
      const hasFilters = Object.values(filters).some(value => value && value.toString().trim() !== '');
      
      if (!hasFilters) {
        // Ako nema filtera, učitaj sve podatke iz baze
        await fetchUgrozenaLica(false);
            return;
      }
      
      // Pripremi filtere za server - pretražuje celu bazu, ne samo trenutnu stranicu
      const serverFilters: Record<string, unknown> = {};
      
      // Dodaj samo ne-prazne filtere - server će pretražiti celu bazu
      if (filters.redniBroj.trim()) serverFilters.redniBroj = filters.redniBroj.trim();
      if (filters.ime.trim()) serverFilters.ime = filters.ime.trim();
      if (filters.prezime.trim()) serverFilters.prezime = filters.prezime.trim();
      if (filters.jmbg.trim()) serverFilters.jmbg = filters.jmbg.trim();
      if (filters.gradOpstina.trim()) serverFilters.gradOpstina = filters.gradOpstina.trim();
      if (filters.mesto.trim()) serverFilters.mesto = filters.mesto.trim();
      if (filters.osnovSticanjaStatusa.trim()) serverFilters.osnovSticanjaStatusa = filters.osnovSticanjaStatusa.trim();
      if (filters.datumTrajanjaPravaOd.trim()) serverFilters.datumTrajanjaPravaOd = filters.datumTrajanjaPravaOd.trim();
      if (filters.datumTrajanjaPravaDo.trim()) serverFilters.datumTrajanjaPravaDo = filters.datumTrajanjaPravaDo.trim();
      
      console.log('Sending filters to server for full database search:', serverFilters);
      
      // Koristi napredni filter endpoint za server-side pretragu kroz celu bazu
      const searchResults = await apiService.searchUgrozenoLiceByFilters(serverFilters, token);
      const ugrozenaLicaData = searchResults.content || searchResults;
      setUgrozenaLica(ugrozenaLicaData);
      
      console.log('Server returned:', ugrozenaLicaData.length, 'results from full database search');
    } catch (err) {
      console.error('Error in filter search:', err);
      setError(err instanceof Error ? err.message : 'Greška pri pretrazi');
    } finally {
      setLoading(false);
    }
  };

  const fetchKategorije = async () => {
    try {
      const data = await apiService.getKategorije('', token!);
      setKategorije(data);
    } catch (err) {
      console.error('Greška pri učitavanju kategorija:', err);
    }
  };

  // Load data when token is available - JEDNOM PRI UČITAVANJU STRANICE
  useEffect(() => {
    if (token) {
      fetchUgrozenaLica();
      fetchKategorije();
    }
  }, [token]); // Prazan dependency array - učitava se samo jednom

  // WebSocket za real-time updates
  useEffect(() => {
    if (!token) return;

    console.log('Subscribing to WebSocket updates for ugrozena lica...');
    
    // Subscribe na ugrozena lica updates
    webSocketService.subscribeToPredmetiUpdates((data) => {
      console.log('Ugrozena lica update received:', data);
      
      // Handle different types of updates
      if (data.type === 'ugrozeno_lice_updated' || data.type === 'ugrozeno_lice_created' || data.type === 'ugrozeno_lice_deleted') {
        console.log('Refreshing ugrozena lica data due to WebSocket update');
        fetchUgrozenaLica(false); // Don't show loading spinner for background updates
      }
    });

    // Subscribe na general messages
    webSocketService.subscribeToGeneralMessages((data) => {
      console.log('General message received:', data);
    });

    // Cleanup na unmount - ne zatvaramo konekciju jer je shared service
    return () => {
      console.log('Unsubscribing from WebSocket updates');
      webSocketService.unsubscribe('/topic/ugrozena-lica');
      webSocketService.unsubscribe('/topic/messages');
    };
  }, [token]);

  const handleModalSuccess = () => {
    fetchUgrozenaLica();
  };

  // Funkcija za dobijanje naziva kategorije po skraćenici
  const getKategorijaNaziv = (skracenica: string) => {
    const kategorija = kategorije.find(k => k.skracenica === skracenica);
    return kategorija ? `${kategorija.skracenica} - ${kategorija.naziv}` : skracenica;
  };

  // Funkcija za slanje poruka preko WebSocket-a
  const sendWebSocketMessage = (content: string, type: string = 'general') => {
    webSocketService.sendMessage(content, type);
  };

  // Funkcija za notifikaciju promene ugroženog lica
  const notifyUgrozenoLiceChange = (type: 'created' | 'updated' | 'deleted', ugrozenoLiceId: number) => {
    webSocketService.notifyPredmetChange(type, ugrozenoLiceId);
  };

  // Custom kebab menu functions
  const handleSort = (field: string, direction: 'asc' | 'desc') => {
    setSortConfig({ field, direction });
    
    // Apply sorting to ugrozena lica
    const sortedUgrozenaLica = [...ugrozenaLica].sort((a, b) => {
      let aValue: any = a[field as keyof UgrozenoLiceT1];
      let bValue: any = b[field as keyof UgrozenoLiceT1];
      
      // Handle special cases
      if (field === 'datumIzdavanjaRacuna') {
        aValue = aValue ? new Date(aValue) : new Date(0);
        bValue = bValue ? new Date(bValue) : new Date(0);
      } else if (field === 'datumTrajanjaPrava') {
        aValue = aValue ? new Date(aValue) : new Date(0);
        bValue = bValue ? new Date(bValue) : new Date(0);
      } else if (typeof aValue === 'string' && typeof bValue === 'string') {
        // For Serbian alphabet sorting
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }
      
      if (direction === 'asc') {
        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
      } else {
        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
      }
    });
    
    setUgrozenaLica(sortedUgrozenaLica);
  };

  const handleFilter = (_field: string) => {
    setShowFilters(true);
  };

  // Simple header renderer - no kebab menu
  const renderSimpleHeader = useCallback((title: string) => {
    return (
      <span className="font-semibold text-gray-900">{title}</span>
    );
  }, []);

  // Export functions
  const handleImport = async (file: File) => {
    try {
      setLoading(true);
      setShowImportProgress(true);
      setImportProgress({
        total: 1,
        current: 0,
        percentage: 0,
        successCount: 0,
        errorCount: 0,
        estimatedTime: 5
      });
      
      console.log('Sending Excel file directly to backend...');
      
      // Send original Excel file directly as MultipartFile
      const formData = new FormData();
      formData.append('file', file);
      formData.append('table', 'euk.ugrozeno_lice_t1');
      
      // Update progress
      setImportProgress(prev => ({
        ...prev,
        current: 1,
        percentage: 50,
        message: 'Šalje se Excel fajl na backend...'
      }));
      
      const response = await fetch('http://localhost:8080/api/import/excel', {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`Import failed: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json();
      
      // Update progress
      setImportProgress(prev => ({
        ...prev,
        percentage: 100,
        successCount: result.processed || 0,
        message: 'Import završen!'
      }));
      
      console.log(`✅ Import completed: ${result.processed || 0} records processed`);
      setMessage(`✅ Import završen! ${result.processed || 0} zapisa je uspešno importovano.`);
      
      // Refresh data
      await fetchData();
      
    } catch (error) {
      console.error('Import error:', error);
      setMessage(`❌ Greška pri importu: ${error instanceof Error ? error.message : 'Nepoznata greška'}`);
    } finally {
      setLoading(false);
      setShowImportProgress(false);
    }
  };
        }
        
        // Only add if we have essential data
        if (rowData.redniBroj || rowData.ime || rowData.prezime || rowData.jmbg) {
          // Debug log for problematic data
          if (rowData.jmbg && typeof rowData.jmbg === 'string' && !/^\d+$/.test(rowData.jmbg)) {
            console.log(`Row ${row} - Invalid JMBG detected:`, {
              jmbg: rowData.jmbg,
              redniBroj: rowData.redniBroj,
              ime: rowData.ime,
              prezime: rowData.prezime,
              allData: rowData
            });
          }
          importData.push(rowData);
        }
      }
      
      console.log(`Extracted ${importData.length} records for import`);
      console.log('Sample import data:', importData[0]);
      console.log('All import data:', importData);
      
      if (importData.length === 0) {
        alert('Nema podataka za import! Proverite da li je Excel fajl u ispravnom formatu.');
        return;
      }
      
      // Show progress modal IMMEDIATELY - before any confirm dialogs
      const BATCH_SIZE = 100; // Process 100 items at a time
      const totalBatches = Math.ceil(importData.length / BATCH_SIZE);
      console.log(`Total batches: ${totalBatches}`);
      
      // Initialize progress state IMMEDIATELY
      setCancelImport(false);
      setImportProgress({
        isImporting: true,
        current: 0,
        total: totalBatches,
        percentage: 0,
        estimatedTime: Math.round(totalBatches * 0.2), // ~20 seconds per batch
        successCount: 0,
        errorCount: 0
      });
      
      
      // Force UI update to show modal IMMEDIATELY
      await new Promise(resolve => setTimeout(resolve, 200));
      
      
      // Import data to backend using batch processing
      let successCount = 0;
      let errorCount = 0;
      const errors: string[] = [];
      
      // Batch configuration
      const BATCH_DELAY = 200; // 200ms delay between batches
      
      console.log(`Starting batch import of ${importData.length} items with batch size ${BATCH_SIZE}`);
      
      // Show initial progress - remove alert, use modal instead
      console.log(`Početak importa: ${importData.length} zapisa u ${totalBatches} batch-ova\nProcijenjeno vreme: ~${Math.round(totalBatches * 0.2)} minuta`);
      
      // Process data in batches
      console.log(`Processing ${importData.length} items in batches of ${BATCH_SIZE}`);
      for (let i = 0; i < importData.length; i += BATCH_SIZE) {
        // Check for cancellation
        console.log('Checking cancellation state:', cancelImport);
        if (cancelImport) {
          console.log('Import cancelled by user');
          break;
        }
        
        const batch = importData.slice(i, i + BATCH_SIZE);
        const batchNumber = Math.floor(i / BATCH_SIZE) + 1;
        
        console.log(`Processing batch ${batchNumber}/${totalBatches} with ${batch.length} items`);
        
        const percentage = Math.round((batchNumber / totalBatches) * 100);
        const estimatedTime = Math.round((totalBatches - batchNumber) * 0.2);
        
        // Update progress state
        setImportProgress({
          isImporting: true,
          current: batchNumber,
          total: totalBatches,
          percentage,
          estimatedTime,
          successCount,
          errorCount
        });
        
        // Force UI update
        await new Promise(resolve => setTimeout(resolve, 10));
        
        console.log(`Processing batch ${batchNumber}/${totalBatches} (${batch.length} items) - Progress: ${percentage}% - Estimated time: ${estimatedTime} min`);
        
        try {
          // Prepare batch data
          const batchData = batch.map(item => {
            // Validate essential data - JMBG nije obavezno
            if (!item.redniBroj && !item.ime && !item.prezime) {
              throw new Error('Nedostaju osnovni podaci (redni broj, ime ili prezime)');
            }
            
            // Validate JMBG format if provided - be more flexible
            let jmbgValue = (item.jmbg || '').toString().trim();
            
            // Skip validation if JMBG is empty or contains non-numeric characters
            if (jmbgValue && !/^\d+$/.test(jmbgValue)) {
              console.warn(`Skipping invalid JMBG value: "${jmbgValue}" - setting to empty`);
              jmbgValue = ''; // Set to empty instead of throwing error
            }
            
            // Safe number conversion with fallback
            const safeNumber = (value: any, fieldName: string): number | undefined => {
              if (!value) return undefined;
              const num = Number(value);
              if (isNaN(num)) {
                console.warn(`Invalid number for ${fieldName}: "${value}" - setting to undefined`);
                return undefined;
              }
              return num;
            };

            return {
              redniBroj: (item.redniBroj || '').toString().substring(0, 20),
              ime: (item.ime || '').toString(),
              prezime: (item.prezime || '').toString(),
              jmbg: jmbgValue,
              pttBroj: (item.pttBroj || '').toString().substring(0, 10),
              gradOpstina: (item.gradOpstina || '').toString(),
              mesto: (item.mesto || '').toString(),
              ulicaIBroj: (item.ulicaIBroj || '').toString(),
              brojClanovaDomacinstva: safeNumber(item.brojClanovaDomacinstva, 'brojClanovaDomacinstva'),
              osnovSticanjaStatusa: (item.osnovSticanjaStatusa || '').toString().substring(0, 50),
              edBrojBrojMernogUredjaja: (item.edBrojBrojMernogUredjaja || '').toString(),
              potrosnjaIPovrsinaCombined: (item.potrosnjaIPovrsinaCombined || '').toString(),
              iznosUmanjenjaSaPdv: safeNumber(item.iznosUmanjenjaSaPdv, 'iznosUmanjenjaSaPdv'),
              brojRacuna: (item.brojRacuna || '').toString()
            };
          });
          
          // Use new import endpoint instead of old batch APIs
          try {
            console.log(`Using new import endpoint for batch ${batchNumber} with ${batchData.length} items`);
            
            // Create a temporary Excel file for this batch
            const workbook = XLSX.utils.book_new();
            const worksheet = XLSX.utils.json_to_sheet(batchData);
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
            const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            
            // Use new import endpoint
            const formData = new FormData();
            formData.append('file', blob, `batch_${batchNumber}.xlsx`);
            formData.append('table', 'euk.ugrozeno_lice_t1');
            
            const response = await fetch('http://localhost:8080/api/import/excel', {
              method: 'POST',
              body: formData,
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            if (!response.ok) {
              throw new Error(`Import failed: ${response.status} ${response.statusText}`);
            }
            
            const result = await response.json();
            successCount += batchData.length;
            console.log(`✅ Batch ${batchNumber}/${totalBatches}: ${batchData.length} records processed via new import endpoint`);
            
          } catch (importError) {
            console.error(`New import endpoint failed for batch ${batchNumber}:`, importError);
            // Continue with next batch instead of stopping
            console.log(`Continuing with next batch despite error in batch ${batchNumber}`);
          }
          
        } catch (error) {
          errorCount += batch.length;
          const errorMessage = error instanceof Error ? error.message : 'Nepoznata greška';
          errors.push(`Batch ${batchNumber}: ${errorMessage}`);
          console.error(`❌ Batch ${batchNumber}/${totalBatches} failed:`, error);
          
          // Continue with next batch instead of stopping completely
          console.log(`Continuing with next batch despite error in batch ${batchNumber}`);
          
          // If too many errors, stop importing
          if (errorCount >= 1000) {
            console.error('Too many errors, stopping import');
            break;
          }
        }
        
        // Add delay between batches (except for the last batch)
        if (i + BATCH_SIZE < importData.length) {
          console.log(`Waiting ${BATCH_DELAY}ms before next batch...`);
          await new Promise(resolve => setTimeout(resolve, BATCH_DELAY));
        }
      }
      
      // Keep modal open until import is complete
      console.log('Import completed successfully');
      console.log(`Final results: ${successCount} successful, ${errorCount} errors`);
      
      // Show completion message in modal
      setImportProgress(prev => ({
        ...prev,
        isImporting: true, // Keep modal open
        current: totalBatches,
        total: totalBatches,
        percentage: 100,
        estimatedTime: 0,
        successCount: successCount,
        errorCount: errorCount
      }));
      
      // Wait 5 seconds then close modal
      setTimeout(() => {
        setCancelImport(false);
        setImportProgress({
          isImporting: false,
          current: 0,
          total: 0,
          percentage: 0,
          estimatedTime: 0,
          successCount: 0,
          errorCount: 0
        });
      }, 5000);
      
      // Show results
      if (errorCount === 0) {
        alert(`Uspešno je importovano ${successCount} zapisa!`);
      } else {
        alert(`Import završen!\nUspešno: ${successCount}\nGreške: ${errorCount}\n\nPrve greške:\n${errors.slice(0, 5).join('\n')}`);
      }
      
      // Refresh data
      await fetchUgrozenaLica();
      
    } catch (error) {
      console.error('Import error:', error);
      alert('Greška pri importu fajla! Proverite da li je fajl u ispravnom Excel formatu.');
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async (selectedColumns: string[], format: string, data: Record<string, unknown>[]) => {
    // Filter data to only include selected columns
    const filteredData = data.map(item => {
      const filteredItem: Record<string, unknown> = {};
      selectedColumns.forEach(col => {
        filteredItem[col] = item[col];
      });
      return filteredItem;
    });

    switch (format) {
      case 'csv':
        const csv = generateCsv(csvConfig)(filteredData as Record<string, string | number>[]);
        download(csvConfig)(csv);
        break;
      case 'excel':
        try {
          console.log('Starting Excel export with template approach...');
          
          // Load Excel template
          const templateResponse = await fetch('/excelTemplate/ЕУК-T1.xlsx');
          const templateBuffer = await templateResponse.arrayBuffer();
          
          // Create a complete copy of the template workbook - preserves ALL formatting
          const templateWorkbook = XLSX.read(templateBuffer, { 
            type: 'array',
            cellStyles: true,
            cellNF: true,
            cellHTML: false
          });
          
          // Get the first worksheet (template)
          const templateSheetName = templateWorkbook.SheetNames[0];
          const templateWorksheet = templateWorkbook.Sheets[templateSheetName];
          
          console.log('Template loaded successfully');
          
          // Prepare data for insertion - EXACTLY like your Python example
          // Each row is one "kupac" - Redosled je: A - O kolona (15 vrednosti)
          // Use filtered data from ExportDialog (only selected rows)
          const dataToAdd = data.map(item => [
            item.ugrozenoLiceId || '',           // A: ID
            item.redniBroj || '',                // B: Redni broj
            item.ime || '',                      // C: Ime
            item.prezime || '',                  // D: Prezime
            item.jmbg || '',                     // E: JMBG
            item.pttBroj || '',                  // F: PTT broj
            item.gradOpstina || '',              // G: Grad/Opština
            item.mesto || '',                    // H: Mesto
            item.ulicaIBroj || '',               // I: Ulica i broj
            item.brojClanovaDomacinstva || '',   // J: Broj članova
            item.osnovSticanjaStatusa || '',     // K: Osnov sticanja
            item.edBrojBrojMernogUredjaja || '', // L: ED broj
            item.potrosnjaIPovrsinaCombined || '', // M: Potrošnja i površina
            item.iznosUmanjenjaSaPdv || '',      // N: Iznos umanjenja
            item.brojRacuna || ''                // O: Broj računa
          ]);
          
          console.log(`Prepared ${dataToAdd.length} rows of data for export`);
          console.log('Sample data row:', dataToAdd[0]);
          console.log('Total ugrozenaLica length:', ugrozenaLica.length);
          console.log('Filtered data length:', filteredData.length);
          
          // --- 1. Sačuvaj sadržaj ispod tabele (footer je od reda 14 do kraja) ---
          const footerStart = 14; // Footer starts at row 14 (based on template analysis)
          const footerRows = [];
          
          // Get current range to find max row
          const currentRange = XLSX.utils.decode_range(templateWorksheet['!ref'] || 'A1');
          const maxRow = currentRange.e.r + 1; // Convert to 1-based
          
          console.log(`Saving footer content from row ${footerStart} to ${maxRow}`);
          
          // Save footer rows with all formatting
          for (let row = footerStart; row <= maxRow; row++) {
            const footerRow = [];
            for (let col = 0; col < 15; col++) { // A-O columns
              const cellAddress = XLSX.utils.encode_cell({ r: row - 1, c: col });
              const cell = templateWorksheet[cellAddress];
              if (cell) {
                footerRow.push({
                  value: cell.v,
                  style: cell.s,
                  type: cell.t
                });
    } else {
                footerRow.push(null);
              }
            }
            footerRows.push(footerRow);
          }
          
          console.log(`Saved ${footerRows.length} footer rows`);
          if (footerRows.length > 0) {
            console.log('First footer row sample:', footerRows[0].slice(0, 5));
          }
          
          // --- 2. Obriši sve te redove da ne smetaju ---
          // Clear footer rows (set to undefined to remove them)
          for (let row = footerStart; row <= maxRow; row++) {
            for (let col = 0; col < 15; col++) {
              const cellAddress = XLSX.utils.encode_cell({ r: row - 1, c: col });
              delete templateWorksheet[cellAddress];
            }
          }
          
          console.log('Cleared footer rows');
          
          // --- 3. Upisi podatke ---
          const startRow = 9; // A9
          
          for (let i = 0; i < dataToAdd.length; i++) {
            const rowData = dataToAdd[i];
            const rowNum = startRow + i;
            
            for (let j = 0; j < rowData.length; j++) {
              const colNum = j + 1; // A=1, B=2, etc.
              const cellAddress = XLSX.utils.encode_cell({ r: rowNum - 1, c: colNum - 1 });
              
              // Set cell value
              templateWorksheet[cellAddress] = { v: rowData[j] };
            }
          }
          
          console.log(`Data inserted from A${startRow} to O${startRow + dataToAdd.length - 1}`);
          
          // --- 4. Ubaci footer odmah ispod poslednjeg reda podataka ---
          const newFooterStart = startRow + dataToAdd.length + 1; // +1 for spacing
          
          for (let i = 0; i < footerRows.length; i++) {
            const footerRow = footerRows[i];
            const newRowNum = newFooterStart + i;
            
            for (let j = 0; j < footerRow.length; j++) {
              const oldCell = footerRow[j];
              if (oldCell) {
                const cellAddress = XLSX.utils.encode_cell({ r: newRowNum - 1, c: j });
                const newCell = { v: oldCell.value, t: oldCell.type };
                
                // Copy all formatting
                if (oldCell.style) {
                  (newCell as any).s = oldCell.style;
                }
                
                templateWorksheet[cellAddress] = newCell;
              }
            }
          }
          
          console.log(`Footer inserted starting from row ${newFooterStart}`);
          console.log(`Footer rows to insert: ${footerRows.length}`);
          if (footerRows.length > 0) {
            console.log('Footer insertion sample:', footerRows[0].slice(0, 5));
          }
          
          // --- 5. Smanji visinu reda 19 (footer red) ---
          const footerRowToResize = newFooterStart + 5; // Row 19 (14 + 5 = 19)
          if (templateWorksheet['!rows']) {
            templateWorksheet['!rows'][footerRowToResize - 1] = { hpt: 15 }; // Smanji visinu na 15pt
            console.log(`Reduced height of row ${footerRowToResize} to 15pt`);
      } else {
            templateWorksheet['!rows'] = [];
            templateWorksheet['!rows'][footerRowToResize - 1] = { hpt: 15 };
            console.log(`Created !rows and reduced height of row ${footerRowToResize} to 15pt`);
          }
          
          // Update range to include new data and footer
          const newRange = XLSX.utils.decode_range(templateWorksheet['!ref'] || 'A1');
          const finalDataEndRow = newFooterStart + footerRows.length - 1;
          newRange.e.r = Math.max(newRange.e.r, finalDataEndRow - 1);
          templateWorksheet['!ref'] = XLSX.utils.encode_range(newRange);
          
          // Generate filename
          let filename = 'ЕУК-Т1-Угрожена-лица';
          if (filters.datumTrajanjaPravaOd || filters.datumTrajanjaPravaDo) {
            const dateFrom = filters.datumTrajanjaPravaOd ? filters.datumTrajanjaPravaOd.replace(/-/g, '') : '00000000';
            const dateTo = filters.datumTrajanjaPravaDo ? filters.datumTrajanjaPravaDo.replace(/-/g, '') : '99999999';
            filename += `_${dateFrom}-${dateTo}`;
          }
          filename += '.xlsx';
          
          // Save the template with data - template stays EXACTLY the same
          // Only data is inserted, no formatting changes
          XLSX.writeFile(templateWorkbook, filename);
          console.log(`Excel file saved: ${filename} with ${dataToAdd.length} rows - template unchanged`);
          
    } catch (error) {
          console.error('Error with Excel template export:', error);
          // Fallback to simple Excel export
          const workbook = XLSX.utils.book_new();
          const worksheet = XLSX.utils.json_to_sheet(filteredData);
          const columnWidths = selectedColumns.map(col => ({ wch: Math.max(col.length, 15) }));
          worksheet['!cols'] = columnWidths;
          XLSX.utils.book_append_sheet(workbook, worksheet, 'Ugrozena Lica');
          XLSX.writeFile(workbook, 'ugrozena-lica.xlsx');
        }
        break;
      case 'pdf':
        // Create PDF with Unicode support
        const pdf = new jsPDF({
          orientation: 'landscape',
          unit: 'mm',
          format: 'a4'
        });
        
        // Add title
        pdf.setFontSize(16);
        pdf.text('ЕУК-Т1 Угрожена лица', 14, 20);
        
        // Add filter info if filters are applied
        let yPosition = 30;
        if (filters.datumTrajanjaPravaOd || filters.datumTrajanjaPravaDo) {
          pdf.setFontSize(10);
          pdf.text('Применени филтери:', 14, yPosition);
          yPosition += 5;
          
          if (filters.datumTrajanjaPravaOd) {
            pdf.text(`Датум трајања права ОД: ${filters.datumTrajanjaPravaOd}`, 14, yPosition);
            yPosition += 5;
          }
          if (filters.datumTrajanjaPravaDo) {
            pdf.text(`Датум трајања права ДО: ${filters.datumTrajanjaPravaDo}`, 14, yPosition);
            yPosition += 5;
          }
          yPosition += 5; // Extra space
        }
        
        // Prepare table data
        const tableData = filteredData.map(item => 
          selectedColumns.map(col => item[col] || '')
        );
        
        // Add table
        autoTable(pdf, {
          head: [selectedColumns.map(col => {
            // Map ćirilične nazive na latinične za PDF kompatibilnost
            const headerMap: Record<string, string> = {
              'ugrozenoLiceId': 'ID',
              'redniBroj': 'Redni broj',
              'ime': 'Ime',
              'prezime': 'Prezime',
              'jmbg': 'JMBG',
              'pttBroj': 'PTT broj',
              'gradOpstina': 'Grad/Opština',
              'mesto': 'Mesto',
              'ulicaIBroj': 'Ulica i broj',
              'brojClanovaDomacinstva': 'Broj članova domaćinstva',
              'osnovSticanjaStatusa': 'Osnov sticanja statusa',
              'edBrojBrojMernogUredjaja': 'ED broj/broj mernog uređaja',
              'potrosnjaIPovrsinaCombined': 'Potrošnja i površina',
              'iznosUmanjenjaSaPdv': 'Iznos umanjenja sa PDV',
              'brojRacuna': 'Broj računa',
              'datumIzdavanjaRacuna': 'Datum izdavanja računa'
            };
            return headerMap[col] || col;
          })],
          body: tableData,
          startY: yPosition,
          styles: {
            fontSize: 10,
            cellPadding: 3,
          },
          headStyles: {
            fillColor: [102, 126, 234],
            textColor: 255,
            fontStyle: 'bold',
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245],
          },
        });
        
        // Generate filename with date range if filters are applied
        let pdfFilename = 'ЕУК-Т1-Угрожена-лица';
        if (filters.datumTrajanjaPravaOd || filters.datumTrajanjaPravaDo) {
          const dateFrom = filters.datumTrajanjaPravaOd ? filters.datumTrajanjaPravaOd.replace(/-/g, '') : '00000000';
          const dateTo = filters.datumTrajanjaPravaDo ? filters.datumTrajanjaPravaDo.replace(/-/g, '') : '99999999';
          pdfFilename += `_${dateFrom}-${dateTo}`;
        }
        pdfFilename += '.pdf';
        
        pdf.save(pdfFilename);
        break;
      default:
        console.log('Unknown format:', format);
    }
  };

  const columns: GridColDef[] = useMemo(() => ([
    { 
      field: 'redniBroj', 
      headerName: 'редни број', 
      width: 120,
      renderHeader: () => renderSimpleHeader('редни број')
    },
    { 
      field: 'ime', 
      headerName: 'име', 
      width: 150,
      renderHeader: () => renderSimpleHeader('име')
    },
    { 
      field: 'prezime', 
      headerName: 'презиме', 
      width: 150,
      renderHeader: () => renderSimpleHeader('презиме')
    },
    { 
      field: 'jmbg', 
      headerName: 'јмбг', 
      width: 140,
      renderHeader: () => renderSimpleHeader('јмбг')
    },
    { 
      field: 'pttBroj', 
      headerName: 'птт број', 
      width: 100,
      renderHeader: () => renderSimpleHeader('птт број')
    },
    { 
      field: 'gradOpstina', 
      headerName: 'град/општина', 
      width: 150,
      renderHeader: () => renderSimpleHeader('град/општина')
    },
    { 
      field: 'mesto', 
      headerName: 'место', 
      width: 120,
      renderHeader: () => renderSimpleHeader('место')
    },
    { 
      field: 'ulicaIBroj', 
      headerName: 'улица и број', 
      width: 180,
      renderHeader: () => renderSimpleHeader('улица и број')
    },
    { 
      field: 'brojClanovaDomacinstva', 
      headerName: 'број чланова', 
      width: 120,
      renderHeader: () => renderSimpleHeader('број чланова')
    },
    { 
      field: 'osnovSticanjaStatusa', 
      headerName: 'основ стицања', 
      width: 140,
      renderHeader: () => renderSimpleHeader('основ стицања'),
      renderCell: (params: GridRenderCellParams) => {
        const osnov = params.value;
        const kategorijaNaziv = getKategorijaNaziv(osnov);
        
        return (
          <div
            style={{
              backgroundColor: '#f3f4f6',
              color: '#374151',
              border: '1px solid #d1d5db',
              borderRadius: '16px',
              padding: '4px 12px',
              fontSize: '0.7rem',
              fontWeight: '500',
              display: 'inline-block',
              minWidth: '60px',
              height: '24px',
              lineHeight: '16px',
              textAlign: 'center',
              whiteSpace: 'nowrap',
              boxShadow: '0 1px 3px rgba(0,0,0,0.15)',
              verticalAlign: 'middle'
            }}
            title={kategorijaNaziv}
          >
            {osnov}
          </div>
        );
      }
    },
    { 
      field: 'edBrojBrojMernogUredjaja', 
      headerName: 'ед број', 
      width: 120,
      renderHeader: () => renderSimpleHeader('ед број')
    },
    { 
      field: 'potrosnjaIPovrsinaCombined', 
      headerName: 'потрошња и површина', 
      width: 200,
      renderHeader: () => renderSimpleHeader('потрошња и површина')
    },
    { 
      field: 'iznosUmanjenjaSaPdv', 
      headerName: 'износ умањења са пдв', 
      width: 180,
      renderHeader: () => renderSimpleHeader('износ умањења са пдв')
    },
    { 
      field: 'brojRacuna', 
      headerName: 'број рачуна', 
      width: 120,
      renderHeader: () => renderSimpleHeader('број рачуна')
    },
    { 
      field: 'datumIzdavanjaRacuna', 
      headerName: 'датум издавања рачуна', 
      width: 180,
      renderHeader: () => renderSimpleHeader('датум издавања рачуна'),
      renderCell: (params: GridRenderCellParams) => (
        params.value ? new Date(params.value).toLocaleDateString('sr-RS') : '-'
      )
    },
    {
      field: 'datumTrajanjaPrava',
      headerName: 'датум трајања права',
      width: 180,
      renderHeader: () => renderSimpleHeader('датум трајања права'),
      renderCell: (params: GridRenderCellParams) => (
        params.value ? new Date(params.value).toLocaleDateString('sr-RS') : '-'
      )
    },
    {
      field: 'actions',
      headerName: 'акције',
      width: 150,
      sortable: false,
      filterable: false,
      headerAlign: 'left',
      align: 'center',
      renderCell: (params: GridRenderCellParams) => (
        <div className="flex items-center justify-center gap-2 h-full w-full">
          {/* Edit icon */}
          <button
            onClick={() => {
              setEditingUgrozenoLice(params.row);
              setShowModal(true);
            }}
            className="flex items-center justify-center w-8 h-8 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-lg transition-colors duration-200 cursor-pointer"
            title="Уреди угрожено лице"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </button>
          
          {/* Delete icon */}
          <button
            onClick={async () => {
              if (confirm('Да ли сте сигурни да желите да обришете ово угрожено лице?')) {
                try {
                  await apiService.deleteUgrozenoLice(params.row.ugrozenoLiceId!, token!);
        fetchUgrozenaLica();
                } catch (err) {
                  setError(err instanceof Error ? err.message : 'Greška pri brisanju');
                }
              }
            }}
            className="flex items-center justify-center w-8 h-8 bg-red-100 hover:bg-red-200 text-red-600 rounded-lg transition-colors duration-200 cursor-pointer"
            title="Обриши угрожено лице"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </div>
      )
    },
  ]), [renderSimpleHeader, token]);

  // Filter states
  const [filters, setFilters] = useState({
    redniBroj: '',
    ime: '',
    prezime: '',
    jmbg: '',
    gradOpstina: '',
    mesto: '',
    osnovSticanjaStatusa: '',
    datumTrajanjaPravaOd: '',  // 🆕 NOVO
    datumTrajanjaPravaDo: ''   // 🆕 NOVO
  });
  
  // Apply sorting to data (filtering is now done server-side)
  const filteredData = useMemo(() => {
    
    // Server-side filtering is now handled in handleFilterSearch
    // This useMemo only handles sorting
    const sorted = [...ugrozenaLica];

    // Apply sorting
    if (sortConfig) {
      sorted.sort((a, b) => {
        const aValue = a[sortConfig.field as keyof UgrozenoLiceT1];
        const bValue = b[sortConfig.field as keyof UgrozenoLiceT1];
        
        // Handle null/undefined values
        if (!aValue && !bValue) return 0;
        if (!aValue) return sortConfig.direction === 'asc' ? -1 : 1;
        if (!bValue) return sortConfig.direction === 'asc' ? 1 : -1;
        
        if (aValue < bValue) {
          return sortConfig.direction === 'asc' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortConfig.direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
    }

    return sorted;
  }, [ugrozenaLica, sortConfig]);

  // Dodaj custom checkbox kolonu na početak
  const columnsWithSelection: GridColDef[] = useMemo(() => [
    {
      field: 'customSelect',
      headerName: '',
      name: 'customSelect',
      width: 50,
      sortable: false,
      filterable: false,
      renderHeader: () => (
        <input
          type="checkbox"
          checked={customSelectedIds.size > 0 && customSelectedIds.size === filteredData.length}
          ref={checkbox => {
            if (checkbox) checkbox.indeterminate = customSelectedIds.size > 0 && customSelectedIds.size < filteredData.length;
          }}
          onChange={toggleSelectAll}
          className="cursor-pointer"
        />
      ),
      renderCell: (params: GridRenderCellParams) => (
        <input
          type="checkbox"
          checked={customSelectedIds.has(params.row.ugrozenoLiceId)}
          onChange={() => toggleRowSelection(params.row.ugrozenoLiceId)}
          className="cursor-pointer"
        />
      ),
    },
    ...columns
  ], [customSelectedIds, filteredData.length, toggleSelectAll, toggleRowSelection, columns]);
  
  // Pagination functions
  const handlePageSizeChange = (newPageSize: number) => {
    setPageSize(newPageSize);
    setCurrentPage(0); // Reset to first page
  };
  
  const goToPreviousPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };
  
  const goToNextPage = () => {
    const maxPage = Math.ceil(filteredData.length / pageSize) - 1;
    if (currentPage < maxPage) {
      setCurrentPage(currentPage + 1);
    }
  };
  
  const totalPages = Math.ceil(filteredData.length / pageSize);


  if (loading) {
  return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
          </div>
    );
  }

  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="mb-8">
            <div className="flex items-center gap-4 mb-2">
              <div className="w-14 h-14 bg-[#3B82F6] rounded-lg flex items-center justify-center">
                <img 
                  src="/ikoniceSidebar/beleIkonice/ugrozenaLicaBelo.png" 
                  alt="EUK Ugrožena lica" 
                  className="w-9 h-9"
                />
        </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">ЕУК-Т1 Угрожена лица</h1>
                <p className="text-base text-gray-600">Управљање угроженим лицима за ЕУК-Т1 систем</p>
      </div>
        </div>
      </div>

        {/* Import Progress Modal */}
        {importProgress.isImporting && (
          <div 
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50" 
            style={{ pointerEvents: 'auto' }}
            onClick={(e) => e.stopPropagation()}
            onKeyDown={(e) => e.preventDefault()}
          >
            <div 
              className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full mx-4 animate-in fade-in-0 zoom-in-95 duration-300" 
              style={{ pointerEvents: 'auto' }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="text-center mb-6">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  {importProgress.percentage === 100 ? (
                    <div className="w-8 h-8 text-green-600 text-2xl">✓</div>
                  ) : (
                    <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                  )}
          </div>
            <h3 className="text-2xl font-bold text-gray-900 mb-2">
              {importProgress.percentage === 100 ? 'Import završen!' : 'Import u toku...'}
            </h3>
            <p className="text-gray-600">
              {importProgress.percentage === 100 
                ? `Uspešno je importovano ${importProgress.successCount} zapisa!`
                : 'Molimo sačekajte dok se podaci importuju'
              }
            </p>
        </div>
              
              {/* Progress Bar */}
              <div className="mb-6">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium text-gray-700">Napredak</span>
                  <span className="text-sm font-bold text-blue-600">{importProgress.percentage}%</span>
      </div>
                <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-blue-600 h-4 rounded-full transition-all duration-500 ease-out relative"
                    style={{ width: `${importProgress.percentage}%` }}
                  >
                    <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
                  </div>
                </div>
              </div>
              
              {/* Stats Grid */}
              <div className="grid grid-cols-2 gap-4 mb-6">
                <div className="bg-green-50 rounded-xl p-4 text-center">
                  <div className="text-2xl font-bold text-green-600 mb-1">{importProgress.successCount}</div>
                  <div className="text-sm text-green-700 font-medium">Uspešno</div>
                </div>
                <div className="bg-red-50 rounded-xl p-4 text-center">
                  <div className="text-2xl font-bold text-red-600 mb-1">{importProgress.errorCount}</div>
                  <div className="text-sm text-red-700 font-medium">Greške</div>
                </div>
              </div>
              
              {/* Batch Info */}
              <div className="bg-gray-50 rounded-xl p-4 mb-6">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium text-gray-700">Batch</span>
                  <span className="text-sm font-bold text-gray-900">
                    {importProgress.current} / {importProgress.total}
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-gray-400 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${(importProgress.current / importProgress.total) * 100}%` }}
                  />
                </div>
              </div>
              
              {/* Time Info */}
              <div className="text-center mb-6">
                <div className="text-sm text-gray-600 mb-1">Procijenjeno vreme</div>
                <div className="text-lg font-bold text-gray-900">
                  ~{importProgress.estimatedTime} minuta
                </div>
              </div>
              
          {/* Cancel/Close Button */}
          <div className="text-center">
            {importProgress.percentage === 100 ? (
        <button
                onClick={() => {
                  setCancelImport(false);
                  setImportProgress({
                    isImporting: false,
                    current: 0,
                    total: 0,
                    percentage: 0,
                    estimatedTime: 0,
                    successCount: 0,
                    errorCount: 0
                  });
                }}
                className="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg font-medium transition-colors duration-200"
              >
                Zatvori
        </button>
            ) : (
        <button
                onClick={() => {
                  setCancelImport(true);
                  setImportProgress({
                    isImporting: false,
                    current: 0,
                    total: 0,
                    percentage: 0,
                    estimatedTime: 0,
                    successCount: 0,
                    errorCount: 0
                  });
                }}
                className="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium transition-colors duration-200"
              >
                Prekini import
        </button>
            )}
      </div>
            </div>
          </div>
        )}

          {error && (
            <ErrorHandler error={error} onRetry={fetchUgrozenaLica} />
          )}

          {/* Tab Navigation */}
          <div className="mb-6">
            <div className="flex justify-between items-center">
              {/* Left side - Tab navigation */}
              <div className="flex items-center gap-4">
        <button
          onClick={() => setActiveTab('tabela')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 w-[140px] h-[44px] justify-center cursor-pointer ${
                    activeTab === 'tabela'
                      ? 'bg-[#3B82F6] text-white shadow-md'
                      : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
                  }`}
                >
                  <img 
                    src={activeTab === 'tabela' ? "/ikoniceSidebar/beleIkonice/tableBelo.svg" : "/ikoniceSidebar/table.svg"} 
                    alt="Table" 
                    className="w-6 h-6" 
                  />
                  Табела
        </button>
        <button
          onClick={() => setActiveTab('statistika')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 w-[140px] h-[44px] justify-center cursor-pointer ${
                    activeTab === 'statistika'
                      ? 'bg-[#3B82F6] text-white shadow-md'
                      : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
                  }`}
                >
                  <svg 
                    className="!w-6 !h-6" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24" 
                    width="24" 
                    height="24"
                    style={{ width: '24px', height: '24px', minWidth: '24px', minHeight: '24px' }}
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  Статистика
        </button>
      </div>

              {/* Right side - Action buttons (only show for table tab) */}
              {activeTab === 'tabela' && (
                <div className="flex gap-4 items-center">
                  <PermissionGuard routeName="/euk/ugrozena-lica" requiredPermission="write" userId={user?.id || undefined}>
                    <button
                      onClick={() => {
                        setEditingUgrozenoLice(null);
                        setShowModal(true);
                      }}
                      className="flex items-center gap-2 px-3 py-1.5 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] transition-colors duration-200 text-sm font-medium cursor-pointer"
                    >
                      <Add className="w-4 h-4" />
                      Додај ново угрожено лице
                    </button>
              </PermissionGuard>
                  <PermissionGuard routeName="/euk/ugrozena-lica" requiredPermission="read" userId={user?.id || undefined}>
                    <button
                      onClick={() => setExportDialogOpen(true)}
                      className="flex items-center gap-2 px-3 py-1.5 bg-[#E5E7EB] text-[#1F2937] rounded-md hover:bg-[#D1D5DB] transition-colors duration-200 text-sm font-medium cursor-pointer"
                    >
                      <FileDownload className="w-4 h-4" />
                      Извоз
                    </button>
                    <button
                      onClick={() => setShowExcelExport(!showExcelExport)}
                      className="flex items-center gap-2 px-3 py-1.5 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors duration-200 text-sm font-medium cursor-pointer"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      Excel Export T1
                    </button>
                    {customSelectedIds.size > 0 && (
                      <button
                        onClick={() => setExportDialogOpen(true)}
                        className="flex items-center gap-2 px-3 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200 text-sm font-medium cursor-pointer shadow-md"
                      >
                        <FileDownload className="w-4 h-4" />
                        Извоз означених ({customSelectedIds.size})
                      </button>
                    )}
              </PermissionGuard>
                  <PermissionGuard routeName="/euk/ugrozena-lica" requiredPermission="write" userId={user?.id || undefined}>
                    <label className="flex items-center gap-2 px-3 py-1.5 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] transition-colors duration-200 text-sm font-medium cursor-pointer">
                      <FileUpload className="w-4 h-4" />
                      Увоз
                      <input
                        type="file"
                        accept=".xlsx,.xls"
                        onChange={async (e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            // Show modal IMMEDIATELY before calling handleImport
                            setImportProgress({
                              isImporting: true,
                              current: 0,
                              total: 1,
                              percentage: 0,
                              estimatedTime: 0,
                              successCount: 0,
                              errorCount: 0
                            });
                            
                            // Force UI update
                            await new Promise(resolve => setTimeout(resolve, 100));
                            console.log('Modal should be visible now');
                            
                            // Then call handleImport
                            handleImport(file);
                            e.target.value = ''; // Reset input
                          }
                        }}
                        className="hidden"
                      />
                    </label>
                  </PermissionGuard>
                  
                  
                  <button
                    onClick={() => setShowFilters(!showFilters)}
                    className="flex items-center gap-2 px-3 py-1.5 bg-[#E5E7EB] text-[#1F2937] rounded-md hover:bg-[#D1D5DB] transition-colors duration-200 text-sm font-medium cursor-pointer"
                  >
                    Филтери
                  </button>
                </div>
                  )}
                </div>
            </div>

          {/* Tab Content */}
      {activeTab === 'tabela' ? (
        <>
              {/* Excel Export Section */}
              {showExcelExport && (
                <div className="mb-6">
                  <T1ExcelExport
                    baseUrl="http://localhost:8080"
                    onExportComplete={(filename) => {
                      console.log('Excel export completed:', filename);
                      // You can add success notification here
                    }}
                    onExportError={(error) => {
                      console.error('Excel export error:', error);
                      // You can add error notification here
                    }}
                  />
                </div>
              )}

              {/* Table Container with Horizontal Scroll */}
              <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                {/* Filters Section */}
                {showFilters && (
                  <div className="p-6 border-b border-gray-200 bg-gray-50">
                    <div className="space-y-6">
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900">Филтери и претрага</h4>
                        <p className="text-sm text-gray-600 mt-1">
                          Филтери претражују целу базу података. Сви подаци се учитавају аутоматски.
                        </p>
          </div>
                      
                      {/* Filter Grid */}
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                        {/* Redni broj */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Редни број</label>
                          <input
                            type="text"
                            placeholder="Претражи по редном броју..."
                            value={filters.redniBroj}
                            onChange={(e) => setFilters(prev => ({ ...prev, redniBroj: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
            />
          </div>

                        {/* Ime */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Име</label>
                          <input
                            type="text"
                            placeholder="Претражи по имену..."
                            value={filters.ime}
                            onChange={(e) => setFilters(prev => ({ ...prev, ime: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
                          />
            </div>

                        {/* Prezime */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Презиме</label>
                          <input
                            type="text"
                            placeholder="Претражи по презимену..."
                            value={filters.prezime}
                            onChange={(e) => setFilters(prev => ({ ...prev, prezime: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
                          />
          </div>

                        {/* JMBG */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">ЈМБГ</label>
                          <input
                            type="text"
                            placeholder="Претражи по ЈМБГ-у..."
                            value={filters.jmbg}
                            onChange={(e) => setFilters(prev => ({ ...prev, jmbg: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
            />
          </div>

                        {/* Grad/Opština */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Град/Општина</label>
                          <input
                            type="text"
                            placeholder="Претражи по граду/општини..."
                            value={filters.gradOpstina}
                            onChange={(e) => setFilters(prev => ({ ...prev, gradOpstina: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
                          />
                        </div>

                        {/* Mesto */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Место</label>
                          <input
                            type="text"
                            placeholder="Претражи по месту..."
                            value={filters.mesto}
                            onChange={(e) => setFilters(prev => ({ ...prev, mesto: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
            />
          </div>

                        {/* Osnov sticanja statusa */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Основ стицања статуса</label>
              <select
                            value={filters.osnovSticanjaStatusa}
                            onChange={(e) => setFilters(prev => ({ ...prev, osnovSticanjaStatusa: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-pointer"
                          >
                            <option value="">Сви основи</option>
                            {kategorije.map(kat => (
                              <option key={kat.kategorijaId} value={kat.skracenica}>
                                {kat.skracenica} - {kat.naziv}
                              </option>
                            ))}
              </select>
            </div>

                        {/* Datum trajanja prava - OD */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Датум трајања права - ОД</label>
                          <input
                            type="date"
                            value={filters.datumTrajanjaPravaOd}
                            onChange={(e) => setFilters(prev => ({ ...prev, datumTrajanjaPravaOd: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
                          />
            </div>

                        {/* Datum trajanja prava - DO */}
                        <div>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Датум трајања права - ДО</label>
                          <input
                            type="date"
                            value={filters.datumTrajanjaPravaDo}
                            onChange={(e) => setFilters(prev => ({ ...prev, datumTrajanjaPravaDo: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 cursor-text"
                            min={filters.datumTrajanjaPravaOd || new Date().toISOString().split('T')[0]}
                          />
            </div>

                        {/* Action buttons */}
                        <div className="flex flex-col gap-2">
                          <label className="block text-sm font-semibold text-gray-700 mb-2">Акције</label>
                          <div className="flex gap-2">
                            <button
                              onClick={() => setFilters({
                                redniBroj: '',
                                ime: '',
                                prezime: '',
                                jmbg: '',
                                gradOpstina: '',
                                mesto: '',
                                osnovSticanjaStatusa: '',
                                datumTrajanjaPravaOd: '',
                                datumTrajanjaPravaDo: ''
                              })}
                              className="flex-1 px-3 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all duration-200 font-medium cursor-pointer text-sm"
                            >
                              Очисти
                            </button>
                            <button
                              onClick={handleFilterSearch}
                              className="flex-1 px-3 py-2 bg-[#3B82F6] text-white rounded-lg hover:bg-[#2563EB] transition-all duration-200 font-medium cursor-pointer text-sm"
                              title="Претражи целу базу података"
                            >
                              Претражи базу ({filteredData.length})
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                {/* DataGrid Table */}
                <Paper sx={{ height: 600, width: '100%' }}>
                  <DataGrid
                    rows={filteredData}
                    columns={columnsWithSelection}
                    getRowId={(row) => row.ugrozenoLiceId || Math.random()}
                    paginationModel={{ page: currentPage, pageSize: pageSize }}
                    onPaginationModelChange={(model) => {
                      setCurrentPage(model.page);
                      setPageSize(model.pageSize);
                    }}
                    pageSizeOptions={[10, 25, 50, 100]}
                    disableRowSelectionOnClick
                    disableColumnMenu
                    disableColumnSorting
                    sx={{ 
                      border: 0,
                      '& .MuiDataGrid-cell': {
                        display: 'flex',
                        alignItems: 'center'
                      },
                      '& .MuiDataGrid-columnHeader': {
                        '& .MuiDataGrid-menuIcon': {
                          display: 'none'
                        },
                        '& .MuiDataGrid-sortIcon': {
                          display: 'none'
                        },
                        '& .MuiDataGrid-columnMenuIcon': {
                          display: 'none'
                        },
                        '& .MuiDataGrid-iconButtonContainer': {
                          display: 'none'
                        },
                        '& .MuiDataGrid-sortIconContainer': {
                          display: 'none'
                        },
                        '& .MuiDataGrid-iconButton': {
                          display: 'none'
                        }
                      }
                    }}
                    slots={{
                      footer: () => (
                        <div className="bg-gray-50 border-t border-gray-200 px-6 py-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-6">
                              <span className="text-sm text-gray-600">
                                Укупно: <span className="font-semibold text-gray-800">{ugrozenaLica.length}</span> угрожених лица
                              </span>
                              {filteredData.length !== ugrozenaLica.length && (
                                <span className="text-sm text-gray-600">
                                  Филтрирано: <span className="font-semibold text-gray-800">{filteredData.length}</span>
                                </span>
                              )}
                              {customSelectedIds.size > 0 && (
                                <span className="text-sm text-blue-600">
                                  Означено: <span className="font-semibold text-blue-800">{customSelectedIds.size}</span> за извоз
                                </span>
                              )}
                              {Object.values(filters).some(value => value && value.toString().trim() !== '') && (
                                <span className="text-sm text-blue-600">
                                  Активни филтери (цела база): <span className="font-semibold">{Object.values(filters).filter(v => v && v.toString().trim() !== '').length}</span>
                                </span>
                              )}
                              <button
                                onClick={handleRefresh}
                                disabled={refreshing}
                                className="flex items-center gap-2 px-2 py-1 text-xs bg-white border border-gray-300 rounded hover:bg-gray-50 transition-colors duration-200 cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                                title="Освежи податке"
                              >
                                <svg className={`w-3 h-3 text-gray-600 ${refreshing ? 'animate-spin' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                                {refreshing ? 'Освежавам...' : 'Освежи'}
                              </button>
                            </div>

                            <div className="flex items-center gap-4">
                              {/* Pagination Info */}
                              <div className="flex items-center gap-3 text-sm text-gray-600">
                                <span>Прикажи:</span>
                                <select 
                                  value={pageSize}
                                  className="px-2 py-1 border border-gray-300 rounded text-xs bg-white cursor-pointer"
                                  onChange={(e) => handlePageSizeChange(parseInt(e.target.value))}
                                >
                                  <option value={10}>10</option>
                                  <option value={25}>25</option>
                                  <option value={50}>50</option>
                                  <option value={100}>100</option>
                                </select>
                                <span>по страници</span>
                              </div>
                              
                              {/* Page Navigation */}
                              <div className="flex items-center gap-2">
                                <button
                                  onClick={goToPreviousPage}
                                  disabled={currentPage === 0}
                                  className="px-2 py-1 text-xs bg-white border border-gray-300 rounded hover:bg-gray-50 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                  </svg>
                                </button>
                                <span className="px-3 py-1 text-xs bg-white border border-gray-300 rounded">
                                  Страница {currentPage + 1} од {totalPages}
                                </span>
                                <button
                                  onClick={goToNextPage}
                                  disabled={currentPage >= totalPages - 1}
                                  className="px-2 py-1 text-xs bg-white border border-gray-300 rounded hover:bg-gray-50 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                  </svg>
                                </button>
                              </div>
            </div>
            </div>
                        </div>
                      )
                    }}
                  />
                </Paper>
          </div>
        </>
      ) : (
        <UgrozenaLicaStatistika ugrozenaLica={ugrozenaLica} />
      )}

          {/* New UgrozenoLice Modal */}
          <NovoUgrozenoLiceModal
            isOpen={showModal}
            onClose={() => {
              setShowModal(false);
              setEditingUgrozenoLice(null);
            }}
            onSuccess={handleModalSuccess}
            editingUgrozenoLice={editingUgrozenoLice}
            token={token!}
          />

          <ExportDialog
            open={exportDialogOpen}
            onClose={() => setExportDialogOpen(false)}
            columns={columns
              .filter(col => col.field !== 'actions' && col.field !== 'datumTrajanjaPrava') // Uklanjamo actions i datumTrajanjaPrava kolone iz izvoza, datumIzdavanjaRacuna ostaje
              .map(col => ({ accessorKey: col.field, header: col.headerName || col.field }))}
            data={filteredData as unknown as Record<string, unknown>[]}
            selectedRows={Array.from(customSelectedIds) as any}
            onExport={handleExport}
          />
    </div>
    </div>
    </>
  );
} 

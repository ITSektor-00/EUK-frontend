"use client";
import React, { useEffect, useState } from 'react';
import { apiService } from '../../../services/api';
import { UgrozenoLiceFormData, UgrozenoLiceT1 } from './types';

interface NovoUgrozenoLiceModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  editingUgrozenoLice?: UgrozenoLiceT1 | null;
  token: string;
}

// Osnov sticanja statusa mo≈æe biti bilo ≈°ta - uklonjen osnovOptions

export default function NovoUgrozenoLiceModal({
  isOpen,
  onClose,
  onSuccess,
  editingUgrozenoLice,
  token
}: NovoUgrozenoLiceModalProps) {
  const [formData, setFormData] = useState<UgrozenoLiceFormData>({
    redniBroj: '',
    ime: '',
    prezime: '',
    jmbg: '',
    pttBroj: '',
    gradOpstina: '',
    mesto: '',
    ulicaIBroj: '',
    brojClanovaDomacinstva: undefined,
    osnovSticanjaStatusa: '',
    edBrojBrojMernogUredjaja: '',
    potrosnjaIPovrsinaCombined: '',
    iznosUmanjenjaSaPdv: undefined,
    brojRacuna: '',
    datumIzdavanjaRacuna: '',
    datumTrajanjaPrava: '',   // üÜï NOVO POLJE
  });
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // Update form data when editingUgrozenoLice changes
  useEffect(() => {
    if (editingUgrozenoLice) {
      setFormData({
        redniBroj: editingUgrozenoLice.redniBroj || '',
        ime: editingUgrozenoLice.ime || '',
        prezime: editingUgrozenoLice.prezime || '',
        jmbg: editingUgrozenoLice.jmbg || '',
        pttBroj: editingUgrozenoLice.pttBroj || '',
        gradOpstina: editingUgrozenoLice.gradOpstina || '',
        mesto: editingUgrozenoLice.mesto || '',
        ulicaIBroj: editingUgrozenoLice.ulicaIBroj || '',
        brojClanovaDomacinstva: editingUgrozenoLice.brojClanovaDomacinstva || undefined,
        osnovSticanjaStatusa: editingUgrozenoLice.osnovSticanjaStatusa || '',
        edBrojBrojMernogUredjaja: editingUgrozenoLice.edBrojBrojMernogUredjaja || '',
        potrosnjaIPovrsinaCombined: editingUgrozenoLice.potrosnjaIPovrsinaCombined || '',
        iznosUmanjenjaSaPdv: editingUgrozenoLice.iznosUmanjenjaSaPdv || undefined,
        brojRacuna: editingUgrozenoLice.brojRacuna || '',
        datumIzdavanjaRacuna: editingUgrozenoLice.datumIzdavanjaRacuna || '',
        datumTrajanjaPrava: editingUgrozenoLice.datumTrajanjaPrava || '',   // üÜï NOVO POLJE
      });
    } else {
      resetForm();
    }
  }, [editingUgrozenoLice]);

  const resetForm = () => {
      setFormData({
      redniBroj: '',
        ime: '',
        prezime: '',
        jmbg: '',
      pttBroj: '',
      gradOpstina: '',
      mesto: '',
      ulicaIBroj: '',
      brojClanovaDomacinstva: undefined,
      osnovSticanjaStatusa: '',
      edBrojBrojMernogUredjaja: '',
      potrosnjaIPovrsinaCombined: '',
      iznosUmanjenjaSaPdv: undefined,
      brojRacuna: '',
      datumIzdavanjaRacuna: '',
      datumTrajanjaPrava: '',   // üÜï NOVO POLJE
    });
    setError(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validacija
    if (!formData.redniBroj.trim()) {
      setError('–ú–æ–ª–∏–º–æ —É–Ω–µ—Å–∏—Ç–µ —Ä–µ–¥–Ω–∏ –±—Ä–æ—ò');
      return;
    }
    
    if (!formData.ime.trim()) {
      setError('–ú–æ–ª–∏–º–æ —É–Ω–µ—Å–∏—Ç–µ –∏–º–µ');
      return;
    }
    
    if (!formData.prezime.trim()) {
      setError('–ú–æ–ª–∏–º–æ —É–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–∑–∏–º–µ');
      return;
    }
    
    if (!formData.jmbg.trim()) {
      setError('–ú–æ–ª–∏–º–æ —É–Ω–µ—Å–∏—Ç–µ –à–ú–ë–ì');
      return;
    }
    
    if (formData.jmbg.length !== 13) {
      setError('–à–ú–ë–ì –º–æ—Ä–∞ –∏–º–∞—Ç–∏ —Ç–∞—á–Ω–æ 13 —Ü–∏—Ñ–∞—Ä–∞');
      return;
    }
    
    if (formData.brojClanovaDomacinstva && (formData.brojClanovaDomacinstva < 1 || formData.brojClanovaDomacinstva > 20)) {
      setError('–ë—Ä–æ—ò —á–ª–∞–Ω–æ–≤–∞ –¥–æ–º–∞—õ–∏–Ω—Å—Ç–≤–∞ –º–æ—Ä–∞ –±–∏—Ç–∏ –∏–∑–º–µ—í—É 1 –∏ 20');
      return;
    }
    
    // Osnov sticanja statusa mo≈æe biti bilo ≈°ta - uklonjena validacija
    
    // Validacija datuma - ne sme biti u buduƒánosti
    if (formData.datumIzdavanjaRacuna) {
      const today = new Date();
      today.setHours(23, 59, 59, 999); // Kraj dana≈°njeg dana
      const selectedDate = new Date(formData.datumIzdavanjaRacuna);
      
      if (selectedDate > today) {
        setError('üìÖ –î–∞—Ç—É–º –∏–∑–¥–∞–≤–∞—ö–∞ —Ä–∞—á—É–Ω–∞ –Ω–µ –º–æ–∂–µ –±–∏—Ç–∏ —É –±—É–¥—É—õ–Ω–æ—Å—Ç–∏');
        return;
      }
    }
    
    // Validacija datuma trajanja prava - mora biti u buduƒánosti
    if (formData.datumTrajanjaPrava) {
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Poƒçetak dana≈°njeg dana
      const selectedDate = new Date(formData.datumTrajanjaPrava);
      
      if (selectedDate < today) {
        setError('üìÖ –î–∞—Ç—É–º —Ç—Ä–∞—ò–∞—ö–∞ –ø—Ä–∞–≤–∞ –º–æ—Ä–∞ –±–∏—Ç–∏ —É –±—É–¥—É—õ–Ω–æ—Å—Ç–∏');
        return;
      }
      
      // Validacija da datum trajanja prava bude nakon datuma izdavanja raƒçuna
      if (formData.datumIzdavanjaRacuna) {
        const datumIzdavanja = new Date(formData.datumIzdavanjaRacuna);
        if (selectedDate <= datumIzdavanja) {
          setError('üìÖ –î–∞—Ç—É–º —Ç—Ä–∞—ò–∞—ö–∞ –ø—Ä–∞–≤–∞ –º–æ—Ä–∞ –±–∏—Ç–∏ –Ω–∞–∫–æ–Ω –¥–∞—Ç—É–º–∞ –∏–∑–¥–∞–≤–∞—ö–∞ —Ä–∞—á—É–Ω–∞');
          return;
        }
      }
    }
    
    setLoading(true);
    setError(null);
    
    try {
      if (editingUgrozenoLice) {
        await apiService.updateUgrozenoLice(editingUgrozenoLice.ugrozenoLiceId!, formData, token);
      } else {
        await apiService.createUgrozenoLice(formData, token);
      }
      
      onSuccess();
      onClose();
      resetForm();
    } catch (err) {
      console.error('Error saving ugrozeno lice:', err);
      setError(err instanceof Error ? err.message : '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á—É–≤–∞—ö—É —É–≥—Ä–æ–∂–µ–Ω–æ–≥ –ª–∏—Ü–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: keyof UgrozenoLiceFormData, value: string | number | undefined) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when user starts typing
    if (error) {
      setError(null);
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm"
      onClick={onClose}
    >
      <div
        className="bg-white rounded-2xl shadow-xl border border-gray-200 w-full max-w-3xl max-h-[90vh] overflow-y-auto p-6"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="bg-[#3B82F6] text-white p-4 rounded-t-2xl -m-6 mb-6 flex items-center justify-between">
          <h3 className="text-xl font-bold">
            {editingUgrozenoLice ? '–£—Ä–µ–¥–∏ —É–≥—Ä–æ–∂–µ–Ω–æ –ª–∏—Ü–µ' : '–î–æ–¥–∞—ò –Ω–æ–≤–æ —É–≥—Ä–æ–∂–µ–Ω–æ –ª–∏—Ü–µ'}
          </h3>
          <button
            onClick={onClose}
            className="text-white hover:text-gray-200 transition-colors duration-200"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6">
          {error && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center">
                <svg className="w-5 h-5 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p className="text-red-800 text-sm">{error}</p>
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Redni broj */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –†–µ–¥–Ω–∏ –±—Ä–æ—ò <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.redniBroj}
                onChange={(e) => handleChange('redniBroj', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ —Ä–µ–¥–Ω–∏ –±—Ä–æ—ò"
                required
              />
        </div>

            {/* Ime */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –ò–º–µ <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.ime}
                onChange={(e) => handleChange('ime', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –∏–º–µ"
                required
              />
            </div>

            {/* Prezime */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –ü—Ä–µ–∑–∏–º–µ <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.prezime}
                onChange={(e) => handleChange('prezime', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–∑–∏–º–µ"
                required
              />
            </div>

            {/* JMBG */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –à–ú–ë–ì <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.jmbg}
                onChange={(e) => handleChange('jmbg', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –à–ú–ë–ì (13 —Ü–∏—Ñ–∞—Ä–∞)"
                maxLength={13}
                required
              />
            </div>

            {/* PTT broj */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ü–¢–¢ –±—Ä–æ—ò</label>
              <input
                type="text"
                value={formData.pttBroj}
                onChange={(e) => handleChange('pttBroj', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –ü–¢–¢ –±—Ä–æ—ò"
              />
            </div>

            {/* Grad/Op≈°tina */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ì—Ä–∞–¥/–û–ø—à—Ç–∏–Ω–∞</label>
              <input
                type="text"
                value={formData.gradOpstina}
                onChange={(e) => handleChange('gradOpstina', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –≥—Ä–∞–¥/–æ–ø—à—Ç–∏–Ω—É"
              />
            </div>

            {/* Mesto */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ú–µ—Å—Ç–æ</label>
              <input
                type="text"
                value={formData.mesto}
                onChange={(e) => handleChange('mesto', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –º–µ—Å—Ç–æ"
              />
            </div>

            {/* Ulica i broj */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–£–ª–∏—Ü–∞ –∏ –±—Ä–æ—ò</label>
              <input
                type="text"
                value={formData.ulicaIBroj}
                onChange={(e) => handleChange('ulicaIBroj', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ —É–ª–∏—Ü—É –∏ –±—Ä–æ—ò"
              />
            </div>

            {/* Broj ƒçlanova domaƒáinstva */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ë—Ä–æ—ò —á–ª–∞–Ω–æ–≤–∞ –¥–æ–º–∞—õ–∏–Ω—Å—Ç–≤–∞</label>
              <input
                type="number"
                min="1"
                max="20"
                value={formData.brojClanovaDomacinstva || ''}
                onChange={(e) => handleChange('brojClanovaDomacinstva', e.target.value ? parseInt(e.target.value) : undefined)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –±—Ä–æ—ò —á–ª–∞–Ω–æ–≤–∞"
              />
            </div>

            {/* Osnov sticanja statusa */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–û—Å–Ω–æ–≤ —Å—Ç–∏—Ü–∞—ö–∞ —Å—Ç–∞—Ç—É—Å–∞</label>
              <input
                type="text"
                value={formData.osnovSticanjaStatusa}
                onChange={(e) => handleChange('osnovSticanjaStatusa', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –æ—Å–Ω–æ–≤ —Å—Ç–∏—Ü–∞—ö–∞ —Å—Ç–∞—Ç—É—Å–∞"
              />
            </div>

            {/* ED broj/broj mernog ureƒëaja */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ï–î –±—Ä–æ—ò/–±—Ä–æ—ò –º–µ—Ä–Ω–æ–≥ —É—Ä–µ—í–∞—ò–∞</label>
              <input
                type="text"
                value={formData.edBrojBrojMernogUredjaja}
                onChange={(e) => handleChange('edBrojBrojMernogUredjaja', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –ï–î –±—Ä–æ—ò"
              />
            </div>

            {/* Potro≈°nja i povr≈°ina */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ü–æ—Ç—Ä–æ—à—ö–∞ –∏ –ø–æ–≤—Ä—à–∏–Ω–∞</label>
              <input
                type="text"
                value={formData.potrosnjaIPovrsinaCombined}
                onChange={(e) => handleChange('potrosnjaIPovrsinaCombined', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–ü–æ—Ç—Ä–æ—à—ö–∞ —É kWh/2500.50/–∑–∞–≥—Ä–µ–≤–∞–Ω–∞ –ø–æ–≤—Ä—à–∏–Ω–∞ —É m2/75.5"
              />
            </div>

            {/* Iznos umanjenja sa PDV */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ò–∑–Ω–æ—Å —É–º–∞—ö–µ—ö–∞ —Å–∞ –ü–î–í</label>
              <input
                type="number"
                min="0"
                step="0.01"
                value={formData.iznosUmanjenjaSaPdv || ''}
                onChange={(e) => handleChange('iznosUmanjenjaSaPdv', e.target.value ? parseFloat(e.target.value) : undefined)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –∏–∑–Ω–æ—Å —É–º–∞—ö–µ—ö–∞"
              />
            </div>

            {/* Broj raƒçuna */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–ë—Ä–æ—ò —Ä–∞—á—É–Ω–∞</label>
              <input
                type="text"
                value={formData.brojRacuna}
                onChange={(e) => handleChange('brojRacuna', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="–£–Ω–µ—Å–∏—Ç–µ –±—Ä–æ—ò —Ä–∞—á—É–Ω–∞"
              />
            </div>

            {/* Datum izdavanja raƒçuna */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–î–∞—Ç—É–º –∏–∑–¥–∞–≤–∞—ö–∞ —Ä–∞—á—É–Ω–∞</label>
              <input
                type="date"
                value={formData.datumIzdavanjaRacuna}
                onChange={(e) => handleChange('datumIzdavanjaRacuna', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              />
            </div>

            {/* Datum trajanja prava */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">–î–∞—Ç—É–º —Ç—Ä–∞—ò–∞—ö–∞ –ø—Ä–∞–≤–∞</label>
              <input
                type="date"
                value={formData.datumTrajanjaPrava}
                onChange={(e) => handleChange('datumTrajanjaPrava', e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                min={new Date().toISOString().split('T')[0]} // Minimum today
              />
              <p className="text-xs text-gray-500 mt-1">
                –î–∞—Ç—É–º –º–æ—Ä–∞ –±–∏—Ç–∏ —É –±—É–¥—É—õ–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–∫–æ–Ω –¥–∞—Ç—É–º–∞ –∏–∑–¥–∞–≤–∞—ö–∞ —Ä–∞—á—É–Ω–∞
              </p>
            </div>
          </div>

          <div className="flex justify-end gap-4 mt-8 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200 font-medium"
            >
              –û—Ç–∫–∞–∂–∏
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-6 py-2 bg-[#3B82F6] text-white hover:bg-[#2563EB] rounded-lg transition-colors duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {loading && (
                <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full"></div>
              )}
              {editingUgrozenoLice ? '–°–∞—á—É–≤–∞—ò –∏–∑–º–µ–Ω–µ' : '–î–æ–¥–∞—ò —É–≥—Ä–æ–∂–µ–Ω–æ –ª–∏—Ü–µ'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

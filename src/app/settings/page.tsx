"use client";
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { PermissionGuard } from '@/components/PermissionGuard';

export default function SettingsPage() {
  const { user, token } = useAuth();
  const [loading, setLoading] = useState(true);
  const [settings, setSettings] = useState<any>({
    notifications: {
      email: true,
      push: false,
      sms: false
    },
    privacy: {
      profileVisible: true,
      activityVisible: false,
      dataSharing: false
    },
    preferences: {
      language: 'sr',
      theme: 'light',
      timezone: 'Europe/Belgrade'
    },
    security: {
      twoFactor: false,
      sessionTimeout: 30,
      passwordExpiry: 90
    }
  });
  const [activeTab, setActiveTab] = useState('notifications');

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      setLoading(true);
      // Simulacija uƒçitavanja pode≈°avanja
      setTimeout(() => {
        setLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Error loading settings:', error);
      setLoading(false);
    }
  };

  const handleNotificationChange = (key: string, value: boolean) => {
    setSettings((prev: any) => ({
      ...prev,
      notifications: {
        ...prev.notifications,
        [key]: value
      }
    }));
  };

  const handlePrivacyChange = (key: string, value: boolean) => {
    setSettings((prev: any) => ({
      ...prev,
      privacy: {
        ...prev.privacy,
        [key]: value
      }
    }));
  };

  const handlePreferenceChange = (key: string, value: any) => {
    setSettings((prev: any) => ({
      ...prev,
      preferences: {
        ...prev.preferences,
        [key]: value
      }
    }));
  };

  const handleSecurityChange = (key: string, value: any) => {
    setSettings((prev: any) => ({
      ...prev,
      security: {
        ...prev.security,
        [key]: value
      }
    }));
  };

  const saveSettings = async () => {
    try {
      setLoading(true);
      // Simulacija ƒçuvanja pode≈°avanja
      await new Promise(resolve => setTimeout(resolve, 1000));
      alert('–ü–æ–¥–µ—à–∞–≤–∞—ö–∞ —Å—É —É—Å–ø–µ—à–Ω–æ —Å–∞—á—É–≤–∞–Ω–∞!');
    } catch (error) {
      console.error('Error saving settings:', error);
      alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á—É–≤–∞—ö—É –ø–æ–¥–µ—à–∞–≤–∞—ö–∞!');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <PermissionGuard routeName="/settings" requiredPermission="read" userId={user?.id || undefined}>
      <div className="p-6 max-w-4xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            ‚öôÔ∏è –ü–û–î–ï–®–ê–í–ê–ä–ê
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤—ô–∞—ö–µ –ª–∏—á–Ω–∏–º –ø–æ–¥–µ—à–∞–≤–∞—ö–∏–º–∞ –∏ –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∞–º–∞
          </p>
        </div>

        {/* Tabs */}
        <div className="mb-8">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              {[
                { id: 'notifications', label: 'üîî –û–±–∞–≤–µ—à—Ç–µ—ö–∞', icon: 'üîî' },
                { id: 'privacy', label: 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç', icon: 'üîí' },
                { id: 'preferences', label: 'üé® –ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–µ', icon: 'üé®' },
                { id: 'security', label: 'üõ°Ô∏è –ë–µ–∑–±–µ–¥–Ω–æ—Å—Ç', icon: 'üõ°Ô∏è' }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Settings Content */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          {/* Notifications Tab */}
          {activeTab === 'notifications' && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                üîî –ü–û–î–ï–®–ê–í–ê–ä–ê –û–ë–ê–í–ï–®–¢–ï–ä–ê
              </h2>
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">–ï–º–∞–∏–ª –æ–±–∞–≤–µ—à—Ç–µ—ö–∞</h3>
                    <p className="text-sm text-gray-500">–ü—Ä–∏–º–∞—ò –æ–±–∞–≤–µ—à—Ç–µ—ö–∞ –ø—É—Ç–µ–º –µ–º–∞–∏–ª–∞</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.notifications.email}
                      onChange={(e) => handleNotificationChange('email', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">Push –æ–±–∞–≤–µ—à—Ç–µ—ö–∞</h3>
                    <p className="text-sm text-gray-500">–ü—Ä–∏–º–∞—ò push –æ–±–∞–≤–µ—à—Ç–µ—ö–∞ —É –ø—Ä–µ–≥–ª–µ–¥–∞—á—É</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.notifications.push}
                      onChange={(e) => handleNotificationChange('push', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">SMS –æ–±–∞–≤–µ—à—Ç–µ—ö–∞</h3>
                    <p className="text-sm text-gray-500">–ü—Ä–∏–º–∞—ò –æ–±–∞–≤–µ—à—Ç–µ—ö–∞ –ø—É—Ç–µ–º SMS-–∞</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.notifications.sms}
                      onChange={(e) => handleNotificationChange('sms', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              </div>
            </div>
          )}

          {/* Privacy Tab */}
          {activeTab === 'privacy' && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                üîí –ü–û–î–ï–®–ê–í–ê–ä–ê –ü–†–ò–í–ê–¢–ù–û–°–¢–ò
              </h2>
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">–í–∏–¥—ô–∏–≤–æ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∞</h3>
                    <p className="text-sm text-gray-500">–î–æ–∑–≤–æ–ª–∏ –¥—Ä—É–≥–∏–º –∫–æ—Ä–∏—Å–Ω–∏—Ü–∏–º–∞ –¥–∞ –≤–∏–¥–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.privacy.profileVisible}
                      onChange={(e) => handlePrivacyChange('profileVisible', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">–í–∏–¥—ô–∏–≤–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                    <p className="text-sm text-gray-500">–î–æ–∑–≤–æ–ª–∏ –¥—Ä—É–≥–∏–º –∫–æ—Ä–∏—Å–Ω–∏—Ü–∏–º–∞ –¥–∞ –≤–∏–¥–µ –≤–∞—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.privacy.activityVisible}
                      onChange={(e) => handlePrivacyChange('activityVisible', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">–î–µ—ô–µ—ö–µ –ø–æ–¥–∞—Ç–∞–∫–∞</h3>
                    <p className="text-sm text-gray-500">–î–æ–∑–≤–æ–ª–∏ –¥–µ—ô–µ—ö–µ –∞–Ω–æ–Ω–∏–º–Ω–∏—Ö –ø–æ–¥–∞—Ç–∞–∫–∞ –∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.privacy.dataSharing}
                      onChange={(e) => handlePrivacyChange('dataSharing', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              </div>
            </div>
          )}

          {/* Preferences Tab */}
          {activeTab === 'preferences' && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                üé® –ü–†–ï–§–ï–†–ï–ù–¶–ï
              </h2>
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –à–µ–∑–∏–∫
                  </label>
                  <select
                    value={settings.preferences.language}
                    onChange={(e) => handlePreferenceChange('language', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="sr">–°—Ä–ø—Å–∫–∏</option>
                    <option value="en">English</option>
                    <option value="de">Deutsch</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–µ–º–∞
                  </label>
                  <select
                    value={settings.preferences.theme}
                    onChange={(e) => handlePreferenceChange('theme', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="light">–°–≤–µ—Ç–ª–∞</option>
                    <option value="dark">–¢–∞–º–Ω–∞</option>
                    <option value="auto">–ê—É—Ç–æ–º–∞—Ç—Å–∫–∞</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –í—Ä–µ–º–µ–Ω—Å–∫–∞ –∑–æ–Ω–∞
                  </label>
                  <select
                    value={settings.preferences.timezone}
                    onChange={(e) => handlePreferenceChange('timezone', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Europe/Belgrade">–ë–µ–æ–≥—Ä–∞–¥ (UTC+1)</option>
                    <option value="Europe/London">–õ–æ–Ω–¥–æ–Ω (UTC+0)</option>
                    <option value="America/New_York">–ä—É—ò–æ—Ä–∫ (UTC-5)</option>
                  </select>
                </div>
              </div>
            </div>
          )}

          {/* Security Tab */}
          {activeTab === 'security' && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                üõ°Ô∏è –ë–ï–ó–ë–ï–î–ù–û–°–¢
              </h2>
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">–î–≤–æ—Ñ–∞–∫—Ç–æ—Ä—Å–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞</h3>
                    <p className="text-sm text-gray-500">–î–æ–¥–∞—Ç–Ω–∞ –∑–∞—à—Ç–∏—Ç–∞ –≤–∞—à–µ–≥ –Ω–∞–ª–æ–≥–∞</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.security.twoFactor}
                      onChange={(e) => handleSecurityChange('twoFactor', e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢—Ä–∞—ò–∞—ö–µ —Å–µ—Å–∏—ò–µ (–º–∏–Ω—É—Ç–∏)
                  </label>
                  <input
                    type="number"
                    value={settings.security.sessionTimeout}
                    onChange={(e) => handleSecurityChange('sessionTimeout', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    min="5"
                    max="480"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ò—Å—Ç–∏—Ü–∞—ö–µ –ª–æ–∑–∏–Ω–∫–µ (–¥–∞–Ω–∏)
                  </label>
                  <input
                    type="number"
                    value={settings.security.passwordExpiry}
                    onChange={(e) => handleSecurityChange('passwordExpiry', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    min="30"
                    max="365"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Save Button */}
          <div className="mt-8 pt-6 border-t border-gray-200">
            <button
              onClick={saveSettings}
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              –°–ê–ß–£–í–ê–à –ü–û–î–ï–®–ê–í–ê–ä–ê
            </button>
          </div>
        </div>
      </div>
    </PermissionGuard>
  );
}
